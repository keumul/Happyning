generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @default(autoincrement()) @id 
  username        String   @unique
  password        String 
  surname         String? 
  bday            DateTime @db.Date
  email           String   @unique
  isAdmin         Boolean? @default(false)

  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt

  event               Event[]
  photo               Photo[]
  eventRating         EventRating[]
  eventRegistrations  EventRegistrations[]
  raterUser           UserRating[] @relation("RaterRelation")
  ratedUser           UserRating[] @relation("RatedRelation")

  @@map("users")
}

model Event {
  id              Int      @default(autoincrement()) @id   
  title           String
  startDate       DateTime
  description     String?
  maxGuestAmount  Int?     
  isPublic        Boolean? @default(false)
  location        String
  
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt

  organizerId     Int
  organizer       User @relation(fields: [organizerId], references: [id])

  categoryId      Int
  category        Category @relation(fields: [categoryId], references: [id])
  

  eventRating         EventRating[]
  eventRegistrations  EventRegistrations[]
  chat                Chat[]
  notification        Notification[]
  album               Album[]

  @@map("events")
}

model EventRating {
  id              Int      @default(autoincrement()) @id
  message         String?
  rate            Float    @default(0.0)

  eventId         Int
  event           Event @relation(fields: [eventId], references: [id])

  userId          Int
  user            User @relation(fields: [userId], references: [id])

  @@map("events_rating") 
}

model UserRating {
  id              Int      @default(autoincrement()) @id
  message         String?
  rate            Float    @default(5.0)

  raterId          Int
  rater            User @relation(name: "RaterRelation", fields: [raterId], references: [id])

  ratedId          Int
  rated            User @relation(name: "RatedRelation", fields: [ratedId], references: [id])

  @@map("users_rating")
}

model EventRegistrations {
  id              Int      @default(autoincrement()) @id
  guestAmount     Int      @default(0)

  eventId         Int
  event           Event @relation(fields: [eventId], references: [id])

  userId          Int
  user            User @relation(fields: [userId], references: [id])

  @@map("events_registrations")
}


model Message {
  id              Int      @default(autoincrement()) @id
  chat            Int
  user            Int
  message         String

  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt

  @@map("messages")
}

model Chat {
  id              Int      @default(autoincrement()) @id

  eventId         Int
  event           Event @relation(fields: [eventId], references: [id])

  @@map("chats")
}

model Notification {
  id              Int      @default(autoincrement()) @id
  message         String

  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt

  eventId         Int
  event           Event @relation(fields: [eventId], references: [id])

  @@map("notifications")
}

model Category {
  id              Int      @default(autoincrement()) @id
  title           String
  description     String?

  event           Event[]

  @@map("categories")
}

model Album {
  id              Int      @default(autoincrement()) @id
  title           String

  eventId         Int
  event           Event @relation(fields: [eventId], references: [id])

  photo           Photo[]

  @@map("albums")
}

model Photo {
  id              Int      @default(autoincrement()) @id
  photo           Bytes

  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt

  albumId         Int
  album           Album @relation(fields: [albumId], references: [id])

  userId          Int
  user            User @relation(fields: [userId], references: [id])

  @@map("photos")
}


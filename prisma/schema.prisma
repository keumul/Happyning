generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique
  password String
  bday     DateTime  @db.Date
  email    String    @unique
  isAdmin  Boolean?  @default(false)

  createdAt DateTime @default(now())

  event              Event[]
  eventRegistrations EventRegistrations[]
  raterUser          UserRating[]         @relation("RaterRelation")
  ratedUser          UserRating[]         @relation("RatedRelation")
  notification       Notification[]
  message            Message[]

  @@map("users")
}

model Event {
  id             Int      @id @default(autoincrement())
  title          String
  startDate      DateTime
  description    String?
  maxGuestAmount Int?
  isPublic       Boolean
  secretCode     String?
  location       String

  createdAt      DateTime @default(now())

  organizerId    Int
  organizer      User @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  categoryId     Int
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  eventRegistrations EventRegistrations[]
  notification       Notification[]
  message            Message[]

  @@map("events")
}

model UserRating {
  id          Int     @id @default(autoincrement())
  message     String?
  rate        Int

  raterId     Int
  rater       User @relation(name: "RaterRelation", fields: [raterId], references: [id], onDelete: Cascade)

  ratedId     Int
  rated       User @relation(name: "RatedRelation", fields: [ratedId], references: [id], onDelete: Cascade)

  @@map("users_rating")
}

model EventRegistrations {
  id          Int @id @default(autoincrement())
  guestAmount Int @default(0)

  createdAt   DateTime @default(now())

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events_registrations")
}

model Message {
  id          Int    @id @default(autoincrement())
  message     String
  latency     Int    

  createdAt   DateTime @default(now())

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  isRead      Boolean? @default(false)
  qrCode      String?

  createdAt   DateTime @default(now())

  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Category {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  event       Event[]

  @@map("categories")
}


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  bday           DateTime  @db.Date
  email          String    @unique
  role           String  
  createdAt      DateTime  @default(now())
  isConfirmed    Boolean
  activationCode String?  @default(cuid())                                     //NEW

  event              Event[]
  eventRegistrations EventRegistrations[]
  raterUser          UserRating[]         @relation("RaterRelation")
  ratedUser          UserRating[]         @relation("RatedRelation")
  notification       Notification[]
  message            Message[]
  preference         Preference[]

  @@map("users")
}

model Preference {
  id               Int                 @id @default(autoincrement())
  userId           Int
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId       Int
  category         Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  formatId         Int
  format           Format              @relation(fields: [formatId], references: [id], onDelete: Cascade)
  
  @@map("preferences")
}

model Event {
  id             Int      @id @default(autoincrement())
  title          String
  startDate      DateTime
  endDate        DateTime
  description    String?
  maxGuestAmount Int?
  ageLimit       Int?
  isPublic       Boolean
  secretCode     String?

  createdAt      DateTime @default(now())

  organizerId    Int
  organizer      User @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  categoryId     Int
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  formatId      Int
  format        Format @relation(fields: [formatId], references: [id], onDelete: Cascade)

  locationId   Int
  location     Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  eventRegistrations EventRegistrations[]
  notification       Notification[]
  message            Message[]
  photo              Photo[]
  eventComplaint     EventComplaint[]
  userRating         UserRating[]

  @@map("events")
}

model UserRating {
  id          Int     @id @default(autoincrement())
  message     String?
  rate        Int

  raterId     Int
  rater       User @relation(name: "RaterRelation", fields: [raterId], references: [id], onDelete: Cascade)

  ratedId     Int
  rated       User @relation(name: "RatedRelation", fields: [ratedId], references: [id], onDelete: Cascade)

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("users_rating")
}

model EventRegistrations {
  id          Int @id @default(autoincrement())
  guestAmount Int @default(0)

  createdAt   DateTime @default(now())

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events_registrations")
}

model MessageComplaint {
  id Int @id @default(autoincrement())
  messageId Int
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  categoryId Int
  category ComplaintsCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model EventComplaint {
  id Int @id @default(autoincrement())
  eventId Int
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  categoryId Int
  category ComplaintsCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model ComplaintsCategory {
  id Int @id @default(autoincrement())
  title String
  description String?
  eventComplaint EventComplaint[]
  messageComplaint MessageComplaint[]

  @@map("complaints_categories")
}

model Message {
  id          Int    @id @default(autoincrement())
  message     String
  latency     Int    

  createdAt   DateTime @default(now())

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageComplaint MessageComplaint[]

  @@map("messages")
}

model Photo {
  id          Int    @id @default(autoincrement())
  photo       Bytes

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  @@map("photos")
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  isRead      Boolean? @default(false)
  qrCode      String?

  createdAt   DateTime @default(now())

  userId      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId     Int
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Location {
  id          Int     @id @default(autoincrement())
  details     String?
  cityId      Int
  city        City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  event       Event[]
  @@map("locations")
}

model Category {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  
  events               Event[]   
  preference           Preference[]

  @@map("categories")
}

model Format {
  id          Int   @id @default(autoincrement())
  title       String
  description String?

  event             Event[]
  preference        Preference[]

  @@map("formats")
}

model Country {
  id          Int   @id @default(autoincrement())
  countryName String

  city        City[]
  
  @@map("countries")
}

model City {
  id          Int   @id @default(autoincrement())
  cityName    String
  countryId   Int
  country     Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  location    Location[]
  @@map("cities")
}

